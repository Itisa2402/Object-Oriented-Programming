During Workshop 7, I have created a Professor class in which I inherited the Employee class and this enabled me to learn about inheritance and override of functions in C++. Among the initial issues I encountered was trying to format the output to be the same alignment and spacing necessary in the tester files. The slightest difference in spaces would lead to wrong outputs and therefore I needed to be precise in the application of width, setf and precision stream manipulators and one had to test the output many times until it printed what was expected. The other issue was handling dynamic memory of m_subject string. My first approach was memory leaks and invalid copies of strings, which I managed to solve with a constant use of the ut.alocpy utility feature and by checking that the memory was deallocated using the destructor. And finally reading comma-separated input correctly in the read() method of Professor was scrolling (and even then only by chaining the Professor method with the base read() method) which I succeeded at by using getline on strings and by being cautious about the order of input. These obstacles encouraged me to be more accurate, and overcoming them, I developed an excellent knowledge of polymorphism, stream formatting, and safety problems in C++.