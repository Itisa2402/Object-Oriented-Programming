Workshop 5 provided me with a better understanding of the concept of operator overloading in C++ and how it can be used in the practical creation of user friendly class interfaces. This workshop dwelled upon the idea of implementing a `Mark` class that helped to transform mark values into various scales, including GPA, percentage, and grades. It needed overloaded arithmetic and type conversion operators and stream insertion and extraction operators. I also studied how to perform formatted output with manipulators like `setw`, `setprecision`, and `setfill` which made the data presentation much better and easy to read.

A significant challenge that I met was the validation of user input via the overloaded `operator>>`. Proper stream functions, such as `peek()` and `getline()`, were needed to make sure that only valid integer values in the range of 0-100 could be accepted, and any remaining invalid data were detected and processed. Second, grade conversion logic based on numeric ranges was not easily implemented, because of the requirement to have proper mapping and format. Lastly, it was more complicated to format the output to the specifications required than it was expected, particularly when an expression involving numbers and characters was contained in the same display function.

On the whole, this workshop was highly educative. I regard it as a chance to supplement theory with practical application. I would consider complementing the development process in future versions with some in-class demonstrations of operator overloading.
